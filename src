import pygame
import random

# Inicializando o Pygame
pygame.init()
pygame.font.init()  # Inicializa o sistema de fontes do Pygame

# Definindo as cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
AZUL = (0, 0, 255)
VERDE = (0, 255, 0)
ROSA = (255, 192, 203)  # Cor rosa
LIGHT_RED = (255, 182, 193)  # Vermelho claro
SKY_BLUE = (135, 206, 235)  # Azul céu
RED = (255, 0, 0)  # Vermelho para o coração

# Dimensões da janela
WIDTH = 400
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Flappy Bird')

# Definindo o FPS (frames por segundo)
FPS = 60
clock = pygame.time.Clock()

# Definindo as variáveis do jogo
bird_width = 40
bird_height = 30
bird_x = 50
bird_y = HEIGHT // 2
bird_velocity = 0
gravity = 0.5
jump = -10
pipe_width = 70
pipe_gap = 150
pipe_velocity = -4
score = 0
game_over = False
game_started = False  # Controle se o jogo já foi iniciado

# Carregando a imagem do pássaro
bird_image = pygame.image.load('png-transparent-flappy-bird-bird-flight-bird-frame-animals-smiley-removebg-preview.png')
bird_image = pygame.transform.scale(bird_image, (bird_width, bird_height))

# Carregando a imagem do cano
pipe_image = pygame.image.load('flappy-bird-pipes-column-rug-bottle-beverage-red-wine-transparent-png-549701-removebg-preview.png')
pipe_image = pygame.transform.scale(pipe_image, (pipe_width, HEIGHT))

# Carregando a imagem de fundo
background_image = pygame.image.load('desktop-wallpaper-flappy-bird-backgrounds-flappy-bird.jpg')  # Substitua pelo nome correto do arquivo
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))  # Ajuste o tamanho conforme necessário

# Função para gerar novos canos
def create_pipe():
    pipe_height = random.randint(150, HEIGHT - 200)
    pipe = {'x': WIDTH, 'height': pipe_height}
    return pipe

# Função para desenhar o pássaro
def draw_bird():
    screen.blit(bird_image, (bird_x, bird_y))

# Função para desenhar os canos
def draw_pipe(pipe):
    screen.blit(pipe_image, (pipe['x'], 0), (0, 0, pipe_width, pipe['height']))
    screen.blit(pipe_image, (pipe['x'], pipe['height'] + pipe_gap), (0, pipe['height'], pipe_width, HEIGHT))

# Função para verificar colisão
def check_collision(pipe):
    if (bird_x + bird_width > pipe['x'] and bird_x < pipe['x'] + pipe_width):
        if (bird_y < pipe['height']):
            return True
    if (bird_x + bird_width > pipe['x'] and bird_x < pipe['x'] + pipe_width):
        if (bird_y + bird_height > pipe['height'] + pipe_gap):
            return True
    if bird_y + bird_height > HEIGHT or bird_y < 0:
        return True
    return False

# Função para exibir as instruções iniciais
def show_instructions():
    screen.fill(ROSA)
    font = pygame.font.SysFont(None, 50)
    title_text = font.render('Flappy Bird', True, WHITE)
    title_rect = title_text.get_rect(center=(WIDTH // 2, HEIGHT // 4))
    screen.blit(title_text, title_rect)

    font = pygame.font.SysFont(None, 35)
    instructions_text1 = font.render('Pressione "ENTER" para iniciar', True, WHITE)
    instructions_text2 = font.render('-- !Evite os canos! --', True, WHITE)
    instructions_text3 = font.render('Pressione "ESPAÇO" para pular', True, WHITE)
    screen.blit(instructions_text1, instructions_text1.get_rect(center=(WIDTH // 2, HEIGHT // 2)))
    screen.blit(instructions_text2, instructions_text2.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 40)))
    screen.blit(instructions_text3, instructions_text3.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 80)))

    draw_heart(WIDTH // 2 - 30, HEIGHT // 4 - 50)
    pygame.display.update()

# Função para desenhar um coração completo
def draw_heart(x, y):
    pygame.draw.polygon(screen, RED, [(x, y), (x + 20, y - 20), (x + 40, y)])
    pygame.draw.polygon(screen, RED, [(x + 20, y), (x + 40, y - 20), (x + 60, y)])
    pygame.draw.polygon(screen, RED, [(x, y), (x + 30, y + 30), (x + 60, y)])

# Função principal do jogo
def game():
    global bird_y, bird_velocity, score, game_over, game_started
    pipes = [create_pipe()]

    while not game_started:
        show_instructions()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    game_started = True

    while True:
        screen.blit(background_image, (0, 0))  # Desenha a imagem de fundo
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and not game_over:
                    bird_velocity = jump
                if event.key == pygame.K_r and game_over:
                    game_over = False
                    bird_y = HEIGHT // 2
                    bird_velocity = 0
                    pipes.clear()
                    pipes.append(create_pipe())
                    score = 0

        if not game_over:
            bird_velocity += gravity
            bird_y += bird_velocity

            for pipe in pipes:
                pipe['x'] += pipe_velocity
                if pipe['x'] < -pipe_width:
                    pipes.remove(pipe)
                    pipes.append(create_pipe())
                    score += 1

            for pipe in pipes:
                if check_collision(pipe):
                    game_over = True

            draw_bird()
            for pipe in pipes:
                draw_pipe(pipe)

            font = pygame.font.SysFont(None, 35)
            score_text = font.render(f'Score: {score}', True, WHITE)
            screen.blit(score_text, [10, 10])
        else:
            screen.fill(ROSA)
            game_over_rect = pygame.Rect(50, HEIGHT // 3 - 50, WIDTH - 100, 150)
            pygame.draw.rect(screen, LIGHT_RED, game_over_rect)
            font = pygame.font.SysFont(None, 75)
            game_over_text = font.render('Fim do jogo', True, WHITE)
            text_rect = game_over_text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
            screen.blit(game_over_text, text_rect)
            font = pygame.font.SysFont(None, 35)
            restart_text = font.render('Precione R para recomeçar', True, WHITE)
            restart_rect = restart_text.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 30))
            screen.blit(restart_text, restart_rect)
            try_again_text = font.render('Tente Novamente!', True, WHITE)
            try_again_rect = try_again_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
            screen.blit(try_again_text, try_again_rect)
            draw_heart(WIDTH // 2 - 30, HEIGHT // 3 - 100)

        pygame.display.update()
        clock.tick(FPS)

# Iniciando o jogo
game()
